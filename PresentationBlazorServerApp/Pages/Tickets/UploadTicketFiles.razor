@page "/uploadfiles/{RequestTicketId}"

@inject IFileUploadService fileUploadService
@inject IRequestFileUploadService fileUpload
@inject NavigationManager NavigationManager
@inject IConfiguration config

@using System.Net.Http.Headers
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using MudBlazor.Dialog
@using MudBlazor.Services
@using MudBlazor.Extensions

@using System.Threading

<h3 class="mb-3">Upload Files For Ticket Request: @RequestTicketId </h3>
<MudItem>
    <EditForm Model="newRequestDocs" OnValidSubmit="SubmitForm">
        <div>
            <InputText id="requestTicketId" class="form-control mb-3" @bind-Value="RequestTicketId"></InputText>
        </div>
        <div>
            <InputFile @key=@(inputFileId) OnChange="(e) => LoadFiles(e)" class="form-control" multiple />

        </div>
        <div>
            @if (files.Count == 0)
            {
                <em>@buttonText</em>
            }
            else
            {
                <button class="btn btn-primary mt-3" type="submit" @onclick="SubmitForm">
                    Add Files
                </button>
            }
        </div>
    </EditForm>
</MudItem>
@if (requestDocs?.Count == 0 && isCleared == false)
{
    <div class="text-center mt-3">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div>Loading files...</div>
    </div>
}
else if (requestDocs != null && isCleared == false)
{
    <h5 class="mt-3 mb-3">Uploaded Files</h5>

    <table class="table table-bordered table-hover table-sm">
        <thead>
            <tr>
                <th>Request Ticket Id</th>
                <th>File Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in requestDocs)
            {
                <tr class="align-middle">
                    <td>@r.RequestTicketId</td>
                    <td>@r.FileName</td>
                </tr>
            }
        </tbody>
    </table>
    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="@SubmitFileMethod">Submit</MudButton>
    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Error" OnClick="ClearFolder">Clear Files</MudButton>
}

@code {

    @inject MudBlazor.ISnackbar snackBar

    [Parameter]
    public string? RequestTicketId { get; set; }

    //Upload files
    // IList<IBrowserFile> files = new List<IBrowserFile>()
    private List<IBrowserFile> files = new List<IBrowserFile>();
    private List<RequestDoc>? requestDocs;
    private RequestDoc newRequestDocs = new();

    private List<string> errors = new();
    private long maxFileSize = 1024 * 5000;
  
    private bool isCleared = false;

    private string? fileName;
    private string? requestTicketId;

    private string buttonText = "";

    private Guid inputFileId = Guid.NewGuid();

    protected override void OnInitialized()
    {
        requestTicketId = RequestTicketId;
        //nothing required as doc will only be shown once added for a single RequestTicketId instance
    }

    //load files
    private void LoadFiles(InputFileChangeEventArgs e)
    {

        // Clear the existing files before adding new ones
        files.Clear();

        // Add the newly selected files
        files.AddRange(e.GetMultipleFiles());

    }

  
    private async Task SubmitForm()
    {
        // Clear errors when submitting form
        errors.Clear();

        try
        {
            // Capture files and get their relative paths
            List<string> relativePaths = await CaptureFiles();

            // Process each file and save data to the database
            foreach (string relativePath in relativePaths)
            {
                fileName = relativePath;

                // Create a new customer model for each file
                RequestDoc newRequestDocs = new RequestDoc
                    {
                        RequestTicketId = requestTicketId, // Assign the first name from the newCustomer object
                        FileName = relativePath
                    };

                // Save the file data to the database
                await fileUpload.FilesUploadAsync(requestTicketId!, fileName);
            }

            // Reload requestDocs data
            await LoadFiles();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Show error message
            errors.Add($"Error {ex.Message} ");
        }
        finally
        {
            // Clear error list
            errors.Clear();

            // Clear the uploaded files after processing all files
            files.Clear();

            isCleared = false;        

        }
    }


    //Capture Files
    private async Task<List<string>> CaptureFiles()
    {
        List<string> relativePaths = new List<string>();

        List<IBrowserFile> filesCopy;

        lock (files)
        {
            filesCopy = new List<IBrowserFile>(files);
            files.Clear();
        }

        foreach (var file in filesCopy)
        {
            try
            {

                // Append the specific subdirectory name to the base storage path
                string subdirectoryName = RequestTicketId!; // You can adjust this to your specific subdirectory name
                string timeStamp = DateTime.Now.ToString("yy-MM-dd_mmssff");
                string newFileName = $"{subdirectoryName}_{timeStamp}{Path.GetExtension(file.Name)}";

                // Get the base storage path from appsettings.json
                string baseStoragePath = config.GetValue<string>("FileStorage")!;
                string folderPath = Path.Combine(baseStoragePath, subdirectoryName);

                // Create the directory if it doesn't exist
                Directory.CreateDirectory(folderPath);

                // Create the file and write the contents
                string filePath = Path.Combine(folderPath, newFileName);
                string relativePath = Path.Combine("", subdirectoryName, newFileName);
                await using FileStream fs = new(filePath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                relativePaths.Add(relativePath);
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file?.Name} Error: {ex.Message}");
            }
        }

        return relativePaths;
    }

    //Finish submission
    private async Task SubmitFileMethod()
    {
        if (requestDocs != null && requestTicketId !=null)
        {
            await fileUpload.FilesUploadSubmitAsync(requestTicketId);

            // Concatenate the formatted request ID with the snackbar message
            string message = $"Ticket successfully submitted. Ticket ID: {requestTicketId}";
            string positionClass = Defaults.Classes.Position.TopCenter;
            Severity severity = Severity.Success;

            ShowSnackbar(message, positionClass, severity);

            // Delay for 2 seconds
            await Task.Delay(2000);

            NavigationManager.NavigateTo("");

        }
        else if (requestTicketId != null)
        {
            // Concatenate the formatted request ID with the snackbar message
            string message = $"There are no files for. Ticket ID: {requestTicketId}";
            string positionClass = Defaults.Classes.Position.TopCenter;
            Severity severity = Severity.Error;


            ShowSnackbar(message, positionClass, severity);
        }
    }
    private void ResetInputFile()
    {
        // Change id so that blazor re-renders InputFile as new component
        inputFileId = Guid.NewGuid();
    }

    private async Task LoadFiles()
    {

        if (requestTicketId != null)
        {
            requestDocs = await fileUpload.FilesDisplayIdAsync(requestTicketId);
        }

        // Ensure that StateHasChanged() is called appropriately
        StateHasChanged();

    }

    private async Task DeleteFiles()
    {
        if (requestTicketId != null)
        await fileUpload.FilesDeleteIdAsync(requestTicketId);

        StateHasChanged();
    }

    public async Task ClearFolder()
    {
        string? subdirectoryName = RequestTicketId;

        ResetInputFile();

        isCleared = true;

        try
        {
            // Get the base storage path from appsettings.json
            string baseStoragePath = config.GetValue<string>("FileStorage")!;
            string folderPath = Path.Combine(baseStoragePath, subdirectoryName!);

            // Check if the folder exists
            if (Directory.Exists(folderPath))
            {
                // Delete the folder and its contents recursively
                Directory.Delete(folderPath, true);

                // Delete files from the database
                await DeleteFiles();

                // Reload requestDocs data after clearing the folder
                await LoadFiles();

                // Trigger a state change to reflect the updated UI
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Folder '{folderPath}' does not exist.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    } 


   void ShowSnackbar(string message, string positionClass, Severity severity)
    {
        snackBar.Clear();
        snackBar.Configuration.PositionClass = positionClass;
        snackBar.Add(message, severity);
    }
}


